// Mocks generated by Mockito 5.4.0 from annotations
// in app_submission_flutter_fundamental/test/restaurant/restaurants_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:app_submission_flutter_fundamental/src/features/restaurant/data/models/customer_review_model.dart'
    as _i7;
import 'package:app_submission_flutter_fundamental/src/features/restaurant/data/models/restaurant_detail_model.dart'
    as _i2;
import 'package:app_submission_flutter_fundamental/src/features/restaurant/data/models/restaurant_model.dart'
    as _i3;
import 'package:app_submission_flutter_fundamental/src/services/local_services.dart'
    as _i8;
import 'package:app_submission_flutter_fundamental/src/services/remote_services.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRestaurantDetailModel_0 extends _i1.SmartFake
    implements _i2.RestaurantDetailModel {
  _FakeRestaurantDetailModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRestaurantModel_1 extends _i1.SmartFake
    implements _i3.RestaurantModel {
  _FakeRestaurantModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabase_2 extends _i1.SmartFake implements _i4.Database {
  _FakeDatabase_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RemoteServicesImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteServicesImpl extends _i1.Mock
    implements _i5.RemoteServicesImpl {
  MockRemoteServicesImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i7.CustomerReviewModel>> addReviewsRestaurant(
          Map<String, dynamic>? reviews) =>
      (super.noSuchMethod(
        Invocation.method(
          #addReviewsRestaurant,
          [reviews],
        ),
        returnValue: _i6.Future<List<_i7.CustomerReviewModel>>.value(
            <_i7.CustomerReviewModel>[]),
      ) as _i6.Future<List<_i7.CustomerReviewModel>>);
  @override
  _i6.Future<List<_i3.RestaurantModel>> getRestaurantData() =>
      (super.noSuchMethod(
        Invocation.method(
          #getRestaurantData,
          [],
        ),
        returnValue: _i6.Future<List<_i3.RestaurantModel>>.value(
            <_i3.RestaurantModel>[]),
      ) as _i6.Future<List<_i3.RestaurantModel>>);
  @override
  _i6.Future<_i2.RestaurantDetailModel> getRestaurantDetail(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRestaurantDetail,
          [id],
        ),
        returnValue: _i6.Future<_i2.RestaurantDetailModel>.value(
            _FakeRestaurantDetailModel_0(
          this,
          Invocation.method(
            #getRestaurantDetail,
            [id],
          ),
        )),
      ) as _i6.Future<_i2.RestaurantDetailModel>);
  @override
  _i6.Future<List<_i3.RestaurantModel>> searchRestaurant(String? search) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchRestaurant,
          [search],
        ),
        returnValue: _i6.Future<List<_i3.RestaurantModel>>.value(
            <_i3.RestaurantModel>[]),
      ) as _i6.Future<List<_i3.RestaurantModel>>);
  @override
  _i6.Future<_i3.RestaurantModel> getRandomRestaurant() => (super.noSuchMethod(
        Invocation.method(
          #getRandomRestaurant,
          [],
        ),
        returnValue:
            _i6.Future<_i3.RestaurantModel>.value(_FakeRestaurantModel_1(
          this,
          Invocation.method(
            #getRandomRestaurant,
            [],
          ),
        )),
      ) as _i6.Future<_i3.RestaurantModel>);
}

/// A class which mocks [LocalServices].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalServices extends _i1.Mock implements _i8.LocalServices {
  MockLocalServices() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i4.Database> get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _i6.Future<_i4.Database>.value(_FakeDatabase_2(
          this,
          Invocation.getter(#database),
        )),
      ) as _i6.Future<_i4.Database>);
  @override
  _i6.Future<List<_i3.RestaurantModel>> getAllFavoriteRestaurant() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllFavoriteRestaurant,
          [],
        ),
        returnValue: _i6.Future<List<_i3.RestaurantModel>>.value(
            <_i3.RestaurantModel>[]),
      ) as _i6.Future<List<_i3.RestaurantModel>>);
  @override
  _i6.Future<void> insertFavoriteRestaurant(_i3.RestaurantModel? restaurant) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertFavoriteRestaurant,
          [restaurant],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> deleteFavoriteRestaurant(String? idRestaurant) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteFavoriteRestaurant,
          [idRestaurant],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<bool> checkIsFavoriteRestaurant(String? idRestaurant) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkIsFavoriteRestaurant,
          [idRestaurant],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
}
